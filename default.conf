server
{
    listen								127.0.0.1:8080;
	listen								127.0.1.2:7070;
    server_name							localhost;
	root								./root;
	index								./root/index.html ./root/index.py;
	error_page 400						./root/400.html;
  	error_page 404 405				 	./root/40x.html;
    error_page 50x 						./root/50x.html;
	client_max_body_size				3G;

	location ./ {
		allow_methods GET POST DELETE;
		autoindex on;
	}
	location ./upload {
		allow_methods GET POST DELETE;
		autoindex on;
	}
	location ./assets {
		allow_methods GET POST DELETE;
		autoindex on;
	}
	location ./redir {
		allow_methods GET POST DELETE;
		return 301 https://www.youtube.com/watch?v=dQw4w9WgXcQ;
	}
}


server
{
    listen						9090;
    server_name					localhost2;
	root						./root2;
	index						index2.html;
  	error_page 404 				./40x.html;
    error_page 500 502 503 504 	./50x.html;
	client_max_body_size		1M;

	location / {
		allow_methods [GET POST DELETE];
		autoindex on;
	}
}



# // void Configuration::setErrorPages()
# // {
# // 	Server_config *it = *_its;
# // 	_itt = _tokens.begin() + 1;
# // 	struct stat stat_buffer;
# // 	size_t cPos;

# // 	if (_itt == _tokens.end() || _tokens.begin() + 2 == _tokens.end())
# // 		throw std::runtime_error(logError("Error: invalid number of arguments in \"error_page\" directive"));
# // 	std::string code = *_itt;
# // 	if (code.size() != 3)
# // 		throw std::runtime_error(logError("Error: error code must be exactly 3 digits in \"error_page\" directive"));
# // 	if (!std::isdigit(code[0]) || !std::isdigit(code[1]) || (!std::isdigit(code[2]) && code[2] != 'x'))
# // 		throw std::runtime_error(logError("Error: unexpected \"" + code + "\" in \"error_page\" directive"));



# // 	int nbr = std::atoi(code.c_str());
# // 	if ((code[2] == 'x' && (nbr < 9 || nbr > 59)) || (code[2] != 'x' && (nbr < 100 || nbr > 599)))
# // 		throw std::runtime_error(logError("Error: error code is out of range: \"" + code + "\" in \"error_page\" directive"));




# // 	std::string file = *(_tokens.begin() + 2);
# // 	cPos = file.find(";");
# // 	if (cPos != file.size() - 1)
# // 		throw std::runtime_error(logError("Error: syntax error in \"error_page\" directive"));
# // 	file.erase(file.size() - 1);
# // 	if (stat(file.c_str(), &stat_buffer) < 0)
# //     	throw std::runtime_error(logError("Error: \"" + file + "\": " + std::string(strerror(errno))));
# // 	if (S_ISDIR(stat_buffer.st_mode))
# // 		throw std::runtime_error(logError("Error: \"" + file + "\": is a directory"));
# //     if (!(stat_buffer.st_mode & S_IRUSR))
# // 		throw std::runtime_error(logError("Error: \"" + file + "\": permission denied"));
# // 	if (code[2] != 'x')
# // 		it->error_pages[nbr] = file;
# // 	else
# // 		for (int i = 0; i < 10; i++)
# // 			it->error_pages[(nbr * 10) + i] = file;
# // 	_tokens.clear();
# // }
