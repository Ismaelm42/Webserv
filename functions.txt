execve: Esta función reemplaza el programa en el proceso actual con un nuevo programa. Se utiliza para ejecutar un archivo binario especificado, pasando argumentos y variables de entorno. No retorna si se ejecuta correctamente.

dup: Duplica un descriptor de archivo, creando una copia que apunta al mismo archivo o recurso, permitiendo múltiples accesos al mismo recurso usando diferentes descriptores.

dup2: Similar a dup, pero permite especificar el valor del nuevo descriptor de archivo. Si el descriptor especificado ya está en uso, se cierra antes de duplicar.

pipe: Crea un canal de comunicación unidireccional entre procesos, representado por dos descriptores de archivo: uno para lectura y otro para escritura.

strerror: Devuelve una cadena con el mensaje de error correspondiente al número de error pasado como argumento. Útil para interpretar códigos de error.

gai_strerror: Devuelve una cadena con un mensaje descriptivo de error para los códigos de error retornados por funciones de la familia getaddrinfo.

errno: Variable global que almacena el código de error de la última llamada a una función del sistema que falló. Utilizada para identificar y manejar errores.

fork: Crea un nuevo proceso duplicando el proceso llamador. El proceso hijo es una copia del padre excepto por el valor retornado por fork.

socketpair: Crea un par de sockets interconectados, permitiendo la comunicación bidireccional entre procesos locales.

htons: Convierte un valor de puerto de host a formato de red (big-endian). Útil para asegurar la compatibilidad en la comunicación de red.

htonl: Convierte un valor de dirección de host a formato de red (big-endian). Útil para trabajar con direcciones IP en la red.

ntohs: Convierte un valor de puerto de formato de red a formato de host. Útil para interpretar correctamente los datos recibidos en la red.

ntohl: Convierte un valor de dirección de formato de red a formato de host. Utilizado al recibir datos de red.

select: Monitorea múltiples descriptores de archivo para ver si están listos para operaciones de lectura, escritura o si han ocurrido excepciones, con soporte para tiempos de espera.

poll: Similar a select, pero más flexible y escalable. Monitorea múltiples descriptores de archivo para eventos, con un array de estructuras pollfd.

epoll_create: Crea un descriptor de archivo para la instancia de epoll.

epoll_ctl: Controla los eventos asociados a un descriptor de archivo en la instancia de epoll.

epoll_wait: Espera eventos en la instancia de epoll y retorna los que están listos.

kqueue: Crea una instancia de cola de eventos (kqueue).

kevent: Manipula y consulta eventos en la instancia de kqueue.

soket: Crea un nuevo punto final de comunicación (socket) que puede ser usado para comunicaciones basadas en protocolo de red.

accept: Acepta una conexión entrante en un socket en modo escucha, creando un nuevo socket para la comunicación con el cliente.

listen: Marca un socket como pasivo, especificando que está dispuesto a aceptar conexiones entrantes.

send: Envía datos a través de un socket conectado. Permite especificar opciones adicionales mediante flags.

recv: Recibe datos de un socket conectado. Bloquea hasta que los datos están disponibles a menos que el socket esté en modo no bloqueante.

chdir: Cambia el directorio de trabajo del proceso actual al directorio especificado.

bind: Asigna una dirección local a un socket, necesario para configurar un socket servidor para aceptar conexiones.

connect: Establece una conexión a un socket remoto utilizando la dirección especificada.

getaddrinfo: Proporciona un conjunto de direcciones de estructura sockaddr basado en el nombre de host y el servicio proporcionado. Facilita la resolución de nombres de dominio.

freeaddrinfo: Libera la memoria asignada por getaddrinfo.

setsockopt: Configura opciones en el nivel de socket, como el tiempo de espera de conexión, la reutilización de direcciones, etc.

getsockname: Recupera la dirección local asignada a un socket.

getprotobyname: Obtiene información sobre un protocolo de red por su nombre, como TCP o UDP.

fcntl: Realiza diversas operaciones en descriptores de archivo, como cambiar los modos de acceso o manipular bloqueos de archivos.

close: Cierra un descriptor de archivo, liberando cualquier recurso asociado.

read: Lee datos de un descriptor de archivo en un buffer. Bloquea hasta que los datos están disponibles a menos que el descriptor esté en modo no bloqueante.

write: Escribe datos desde un buffer a un descriptor de archivo. Bloquea hasta que todos los datos han sido escritos a menos que el descriptor esté en modo no bloqueante.

waitpid: Espera a que un proceso hijo específico termine, y opcionalmente retorna el estado de terminación.

kill: Envía una señal a un proceso o grupo de procesos para realizar operaciones como terminación o interrupción.

signal: Establece una función manejadora para una señal específica, permitiendo la captura y manejo personalizado de señales.

access: Comprueba los permisos de acceso del proceso llamador a un archivo específico, sin abrirlo.

stat: Recupera información sobre un archivo, como tamaño, permisos y tiempos de modificación.

open: Abre un archivo, retornando un descriptor de archivo que puede ser usado para operaciones de lectura y escritura.

opendir: Abre un directorio, retornando un puntero a una estructura DIR utilizada para leer entradas del directorio.

readdir: Lee la siguiente entrada en un directorio abierto, retornando un puntero a una estructura dirent que contiene información sobre la entrada.

closedir: Cierra un directorio abierto, liberando cualquier recurso asociado.
